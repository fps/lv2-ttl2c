#!/usr/bin/env python

import lilv
import argparse
import sys
import pprint
import os
import pathlib
import jinja2

import lv2_ttl2c

argparser = argparse.ArgumentParser(
    description = 'Generate useful C code from a LV2 plugin bundle\'s metadata',
    formatter_class = argparse.ArgumentDefaultsHelpFormatter)

argparser.add_argument('-b', '--bundle', default='.', help='the bundle directory to analyze')
argparser.add_argument('-o', '--output-directory', default='.', help='the output directory')
argparser.add_argument('-p', '--prefix', default='ttl2c_', help='the prefix added to output filenames')

args = argparser.parse_args()

bundle_file_uri = pathlib.PurePath.as_uri(pathlib.Path(os.path.abspath(args.bundle))) + "/"

world = lilv.World()
world.load_bundle(bundle_file_uri)

for plugin in world.get_all_plugins():
    file_basename = str(plugin.get_uri()).split("://")[1].split("/")[-1].replace("-","_").replace(".","_")    
    basename = "plugin"

    plugin_data = {};
    plugin_data['uri'] = plugin.get_uri()
    plugin_data['has_atom_ports'] = False
    plugin_data['has_midi_ports'] = False
    plugin_data['needs_urid_map'] = False
    plugin_data['ports'] = []

    for port_index in range(plugin.get_num_ports()):
        port = plugin.get_port_by_index(port_index)

        port_data = {}
        port_data['is_atom_port'] = False
        port_data['is_control_port'] = port.is_a(lilv.LILV_URI_CONTROL_PORT)
        port_data['is_input_port'] = port.is_a(lilv.LILV_URI_INPUT_PORT)
        port_data['symbol'] = port.get_symbol()
        port_data['index'] = port_index

        if port.is_a(lilv.LILV_URI_ATOM_PORT):
            port_data['is_atom_port'] = True
            plugin_data['has_atom_ports'] = True

            if port.supports_event(world.new_uri("http://lv2plug.in/ns/ext/midi#MidiEvent")):
                plugin_data['has_midi_ports'] = True
                plugin_data['needs_urid_map'] = True

        plugin_data['ports'].append(port_data)

    template = lv2_ttl2c.environment.get_template('plugin.h')
    rendered = template.render(plugin_data)
    open(os.path.join(args.output_directory, f'{args.prefix}{file_basename}.h'), 'w').write(rendered)

    template = lv2_ttl2c.environment.get_template('plugin.c')
    rendered = template.render(plugin_data)
    open(os.path.join(args.output_directory, f'{args.prefix}{file_basename}.c'), 'w').write(rendered)
